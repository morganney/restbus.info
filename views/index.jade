extends layout

block page
  #shell
    h3 Usage
    h4: code listen([port],[callback])
    p.
      Start <code>restbus</code> passing an optional <code>port</code> and/or listening <code>callback</code>.
      <code>port</code> defaults to <strong>3535</strong>.
    p For example:
    script(src='https://gist.github.com/morganney/9015641.js')
    p Now your application can access the <code>restbus</code> API over <code>http://localhost:3535</code>.
    h4: code close()
    p <strong><em>You won't really need this</em></strong>.<sup>*</sup>
    p.
      Nevertheless, this stops <code>restbus</code> from accepting new
      connections while keeping existing ones until they are finished or time out. It's a wrapper for
      <a href='http://nodejs.org/api/net.html#net_server_close_callback'>Node.js server.close()</a>
      that doesn't accept a callback, and can only be invoked once until you restart you application,
      but <strong><em>you can </em></strong><code>restbus.listen()</code> after calling <code>close()</code>.
    h4: code isListening()
    p <strong><em>Again, you won't really need this</em></strong>.<sup>*</sup>
    p.
      Except maybe for testing or if you do want to <code>restbus.close()</code> for some reason and later
      see if <code>restbus</code> has stopped listening.
    p: small <sup>*</sup> These were added purely for demonstration and are not of much use in a production environment.

    h3 <code>restbus</code> API
    .warning
      p.
        The <code>restbus</code> API is bound by the same <strong>usage limits</strong> as the
        <a href='http://www.nextbus.com/xmlFeedDocs/NextBusXMLFeed.pdf'>NextBus XML feed</a>. You've been warned.
    h4 Standard Response Headers
    p.
      All responses include a <code>Content-Type: application/json</code> header, and optionally a
      <code>Content-Encoding: gzip</code> header provided the corresponding <code>Accept-Encoding: gzip</code>
      request header.
    p.
      <code>restbus</code> supports <strong>CORS</strong> by default and all API responses include an
      <code>Acces-Control-Allow-Origin: *</code> header.
    p.
      All <strong>successful</strong> requests include an <strong>HTTP/1.1 200 OK</strong> status header
      in the response.
    h4.res Agencies
    .url
      h4 <em>GET</em> /agencies
      p.desc Returns an array of available transit agencies.
      p <strong>xml feed correspondence</strong>: command=agencyList
      p <strong>sample response</strong>: <a href='/api/agencies'> <em>GET</em> /agencies</a>
    .url
      h4 <em>GET</em> /agencies/:agency
      p.desc Returns an agency object for transit agency id <code>:agency</code>.
      p <strong>xml feed correspondence</strong>: none
      p <strong>sample response</strong>: <a href='/api/agencies/sf-muni'> <em>GET</em> /agencies/sf-muni</a>
    h4.res Routes
    .url
      h4 <em>GET</em> /agencies/:agency/routes
      p.desc.
        Returns an array of routes services by transit agency id <code>:agency</code>. The route objects in this
        response contain very limited information and are meant to be used for building UI &lt;select&gt;'s of
        an agencies available routes. For more detailed route information use the
        <a href='#route-config'>endpoint below.</a>
      p <strong>xml feed correspondence</strong>: command=routeList
      p.
        <strong>sample response</strong>: <a href='/api/agencies/sf-muni/routes'> <em>GET</em>
        /agencies/sf-muni/routes</a>
    .url#route-config
      h4 <em>GET</em> /agencies/:agency/routes/:route
      p.desc.
        Returns a route configuration object for transit agency id <code>:agency</code> with route
        id <code>:route</code>. The route configuration data contains more detailed information for a route as
        well as arrays of the stop, direction, and path objects that constitute the route. Route configuration data
        can be complex. For more detailed information about the properties of each object, see the
        <a href='http://www.nextbus.com/xmlFeedDocs/NextBusXMLFeed.pdf'>NextBus XML feed documentation</a> under
        "Command routeConfig", and view the sample response below.
      p <strong>xml feed correspondence</strong>: command=routeConfig
      p.
        <strong>sample response</strong>: <a href='/api/agencies/sf-muni/routes/F'> <em>GET</em>
        /agencies/sf-muni/routes/F</a>
    h4.res Vehicles (Buses)
    .url
      h4 <em>GET</em> /agencies/:agency/vehicles
      p.desc.
        Returns an array of all vehicles (buses) operated by transit agency id <code>:agency</code>.
      p <strong>xml feed correspondence</strong>: none
      p.
        <strong>sample response</strong>: <a href='/api/agencies/sf-muni/vehicles'> <em>GET</em>
        /agencies/sf-muni/vehicles</a>
    .url
      h4 <em>GET</em> /agencies/:agency/vehicles/:vehicle
      p.desc.
        Returns a vehicle object for transit agency id <code>:agency</code> and vehicle id <code>:vehicle</code>.
      p <strong>xml feed correspondence</strong>: none
      p.
        <strong>sample response</strong>: <a href='/api/agencies/sf-muni/vehicles/1074'> <em>GET</em>
        /agencies/sf-muni/vehicles/1074</a>
    .url
      h4 <em>GET</em> /agencies/:agency/routes/:route/vehicles
      p.desc.
        Returns an array of all vehicles operated by transit agency id <code>:agency</code> and currently on route id
        <code>:route</code>.
      p <strong>xml feed correspondence</strong>: command=vehicleLocations
      p.
        <strong>sample response</strong>: <a href='/api/agencies/sf-muni/routes/F/vehicles'> <em>GET</em>
        /agencies/sf-muni/routes/F/vehicles</a>
    h4.res Predictions
    .url
      h4 <em>GET</em> /agencies/:agency/routes/:route/stops/:stop/predictions
      p.desc.
        Returns an array of predictions for agency id <code>:agency</code>, route id <code>:route</code> and stop id
        <code>:stop</code>. Each prediction object contains an array of 'values' which is most likely the data you want.
        The array of values in sorted in ascending order by the 'epochTime' property.
      p <strong>xml feed correspondence</strong>: command=predictions
      p.
        <strong>sample response</strong>: <a href='/api/agencies/sf-muni/routes/F/stops/5650/predictions'> <em>GET</em>
        /agencies/sf-muni/routes/F/stop/5650/predictions</a>
    .url
      h4 <em>GET</em> /agencies/:agency/tuples/:tuple/predictions
      p.desc.
        Returns an array of predictions, one for each route:stop pair in the <code>:tuple</code> for
        agency id <code>:agency</code>. A tuple is a sequence of route:stop pairs separated by a comma (,).
        A route:stop pair is a <code>:route</code> and <code>:stop</code> separated by a colon (:). For example,
        F:5650, or N:6997. You can turn these two route:stop pairs into a tuple F:5650,N:6997.
      p <strong>xml feed correspondence</strong>: command=predictionsForMultiStops
      p.
        <strong>sample response</strong>: <a href='/api/agencies/sf-muni/tuples/F:5650,N:6997/predictions'> <em>GET</em>
        /agencies/sf-muni/tuples/F:5650,N:6997/predictions</a>
    .url
      h4 <em>GET</em> /agencies/:agency/stops/:code/predictions
      p.desc.
        Returns an array of predictions for all routes passing through the stop with code
        <code>:code</code> for agency id <code>:agency</code>. <em>Not all transit agencies use stop codes</em>.
      p <strong>xml feed correspondence</strong>: command=predictionsForMultiStops (replaced 'stopId' with 'code')
      p.
        <strong>sample response</strong>: <a href='/api/agencies/sf-muni/stops/15650/predictions'> <em>GET</em>
        /agencies/sf-muni/stops/15650/predictions</a>
    .url
      h4 <em>GET</em> /locations/:latlon/predictions<sup>&dagger;</sup>
      p.desc.
        Returns an array of predictions for all stops within a set radius of a latitude and longitude
        <code>:latlon</code>. The radius is set at 2,300 meters or about 1.5 miles. Predictions can be spread across
        multiple agencies depending on <code>:latlon</code>. This endpoint sorts the array of 'values' in ascending
        order, <em> but using 'minutes' instead</em> because 'epochTime' is always <code>null</code> due to
        unavailability. <code>:latlon</code> has the form latitude,longitude, e.g '37.784825,-122.395592'.
      p <strong>xml feed correspondence</strong>: none
      p.
        <strong>sample response</strong>: <a href='/api/locations/37.784825,-122.395592/predictions'> <em>GET</em>
        /locations/37.784825,-122.395592/predictions</a>
    h4 Errors
    p The <code>restbus</code> API can return several kinds of HTTP error status codes:
    ul
      li 404 Not Found
      li 500 Internal Server Error
      li 503 Service Unavailable
    p <strong>404</strong> status indicates an unsupported URL was requested. Check your URL structure.
    p.
      <strong>503</strong> status corresponds to an "initializing" error response from the NextBus XML feed, and
      clients are encouraged to try the request until initialization is complete. You should rarely encounter this
      status code.
    p.
      A <strong>500</strong> status is most likely some networking error when requesting data from
      webservices.nextbus.com, however it could also be due to an XML parsing error. Check the <code>message</code>
      property of the error response object for more information. You should rarely, if ever, encouter this status code.
    p An error looks like:
    script(src='https://gist.github.com/morganney/9016151.js')
    p: small.
        <sup>&dagger;</sup> This endpoint is experimental as it relies on a NextBus Inc. data source that may be removed
        at any time without warning or notice. Use it at your own risk.